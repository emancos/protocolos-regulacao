import { promises as fs } from 'fs';
import path from 'path';

export class LocalUploadService {
    private static readonly UPLOAD_DIR = process.env.UPLOAD_DIR;

    /**
     * Valida se o diret√≥rio de upload est√° configurado.
     * @private
     */
    private static validateUploadDir() {
        if (!this.UPLOAD_DIR) {
            console.error("‚ùå Vari√°vel de ambiente UPLOAD_DIR n√£o est√° definida.");
            throw new Error("O diret√≥rio de upload n√£o est√° configurado no servidor.");
        }
    }

    /**
     * Salva um √∫nico arquivo no disco local dentro de uma pasta de protocolo.
     * @param file - O arquivo a ser salvo.
     * @param protocol - O n√∫mero do protocolo para criar a subpasta.
     * @returns Um objeto com o caminho do arquivo e a URL p√∫blica.
     */
    static async saveFile(file: File, protocol: string): Promise<{ filePath: string; publicUrl: string }> {
        this.validateUploadDir();

        const bytes = await file.arrayBuffer();
        const buffer = Buffer.from(bytes);

        // Define o caminho do diret√≥rio do protocolo
        const protocolDir = path.join(this.UPLOAD_DIR!, protocol);
        
        // Garante que o diret√≥rio do protocolo exista
        await fs.mkdir(protocolDir, { recursive: true });

        // Gera um nome de arquivo √∫nico para evitar colis√µes
        const timestamp = Date.now();
        const uniqueFileName = `${timestamp}_${file.name.replace(/\s/g, '_')}`;
        const filePath = path.join(protocolDir, uniqueFileName);

        // Escreve o arquivo no disco
        await fs.writeFile(filePath, buffer);
        console.log(`‚úÖ Arquivo salvo em: ${filePath}`);

        // Gera a URL p√∫blica para acessar o arquivo atrav√©s da nossa API
        const publicUrl = `/api/uploads/${protocol}/${uniqueFileName}`;

        return { filePath, publicUrl };
    }

    /**
     * Exclui um arquivo do disco local.
     * @param publicUrl - A URL p√∫blica do arquivo a ser exclu√≠do.
     */
    static async deleteFile(publicUrl: string): Promise<void> {
        this.validateUploadDir();
        
        try {
            // Extrai o caminho relativo da URL p√∫blica
            const relativePath = publicUrl.replace('/api/uploads/', '');
            const filePath = path.join(this.UPLOAD_DIR!, relativePath);

            // Verifica se o arquivo existe antes de tentar excluir
            await fs.access(filePath);
            await fs.unlink(filePath);
            console.log(`üóëÔ∏è Arquivo exclu√≠do: ${filePath}`);

            // Opcional: Verificar se a pasta do protocolo est√° vazia e exclu√≠-la
            const protocolDir = path.dirname(filePath);
            const files = await fs.readdir(protocolDir);
            if (files.length === 0) {
                await fs.rmdir(protocolDir);
                console.log(`üìÇ Pasta vazia exclu√≠da: ${protocolDir}`);
            }
        } catch (error) {
            // Ignora o erro se o arquivo n√£o existir (pode j√° ter sido exclu√≠do)
            if (error instanceof Error && 'code' in error && error.code !== 'ENOENT') {
                console.error(`‚ùå Erro ao excluir o arquivo ${publicUrl}:`, error);
                throw new Error("N√£o foi poss√≠vel excluir o arquivo.");
            }
        }
    }
}
